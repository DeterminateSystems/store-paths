# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.13)
{
  # A helpful description of your flake
  description = "FlakeHub store path outputs example project";

  # Flake inputs
  inputs = {
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*";
    nix = {
      url = "https://flakehub.com/f/DeterminateSystems/nix/2.0";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    flake-compat.url = "https://flakehub.com/f/edolstra/flake-compat/*";
  };

  # Flake outputs that other flakes can use
  outputs = inputs:
    let
      # Helpers for producing system-specific outputs
      supportedSystems = [ "x86_64-linux" "aarch64-darwin" "x86_64-darwin" "aarch64-linux" ];
      forEachSupportedSystem = f: inputs.nixpkgs.lib.genAttrs supportedSystems (system: f {
        pkgs = import inputs.nixpkgs { inherit system; };
      });

      linuxPkgs = inputs.nixpkgs.legacyPackages.x86_64-linux;
    in
    {
      # Docker image outputs
      dockerImages = forEachSupportedSystem ({ pkgs }: {
        server = pkgs.dockerTools.buildLayeredImage {
          name = "static-web-server";
          contents = with linuxPkgs; [ cacert ];
          config = {
            Entrypoint = [ "${linuxPkgs.static-web-server}/bin/static-web-server" ];
          };
        };
      });

      # NixOS configurations
      nixosConfigurations.baseline = inputs.nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          ({ pkgs, ... }: {
            imports = [
              inputs.nix.nixosModules.default
            ];
          })

          ./nixos/baseline.nix
        ];
      };

      # The formatter that's invoked when you run `nix fmt`
      formatter = forEachSupportedSystem ({ pkgs }: pkgs.nixpkgs-fmt);
    };
}
